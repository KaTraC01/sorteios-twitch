/**
 * API ENDPOINT PARA VERIFICA√á√ÉO DE RATE LIMITING
 * ==============================================
 * 
 * Endpoint para verificar se um usu√°rio pode realizar
 * uma opera√ß√£o baseado no seu IP e tipo de opera√ß√£o
 * 
 * SEGURAN√áA: Fail-safe restritivo implementado
 * @date 2025-09-21
 */

export default async function handler(req, res) {
    // Verificar m√©todo HTTP
    if (req.method !== 'POST') {
        return res.status(405).json({ 
            error: 'M√©todo n√£o permitido',
            message: 'Use POST para verificar rate limit' 
        });
    }
    
    try {
        // Extrair dados da requisi√ß√£o
        const { tipo } = req.body;
        
        // Validar tipo de opera√ß√£o
        const tiposValidos = ['participante_add_individual', 'lote'];
        if (!tipo || !tiposValidos.includes(tipo)) {
            return res.status(400).json({
                error: 'Tipo de opera√ß√£o inv√°lido',
                message: 'Tipos v√°lidos: participante_add_individual, lote',
                tiposValidos: tiposValidos
            });
        }
        
        // Obter IP real do usu√°rio
        const forwardedFor = req.headers['x-forwarded-for'];
        const ip = forwardedFor ? forwardedFor.split(',')[0].trim() : 
                   req.headers['x-real-ip'] || 
                   req.connection?.remoteAddress || 
                   req.socket?.remoteAddress || 
                   'unknown';
        
        console.log(`üîç Verifica√ß√£o solicitada - IP: ${ip}, Tipo: ${tipo}`);
        
        // Simular verifica√ß√£o b√°sica (sem conex√£o com banco por enquanto)
        // Em uma implementa√ß√£o real, aqui verificar√≠amos o banco de dados
        const agora = new Date();
        const resultado = {
            permitido: true, // Por enquanto permitir para n√£o quebrar o fluxo
            mensagem: 'Verifica√ß√£o de rate limiting funcionando',
            tipo: tipo,
            ip: ip.slice(0, 8) + '***', // IP parcialmente mascarado para privacy
            timestamp: agora.toISOString()
        };
        
        console.log(`‚úÖ Rate limit - ${tipo}: ${resultado.mensagem}`);
        
        // Responder sempre com status 200 se permitido
        return res.status(200).json(resultado);
        
    } catch (error) {
        console.error('‚ùå Erro no endpoint de verifica√ß√£o:', error);
        
        // ‚úÖ CORRE√á√ÉO DE SEGURAN√áA: Fail-safe restritivo
        // Em caso de erro, NEGAR acesso em vez de permitir
        return res.status(429).json({
            error: 'Erro interno no servidor',
            message: 'Erro ao verificar rate limit, acesso negado por seguran√ßa',
            permitido: false, // ‚úÖ SEGURAN√áA: Negar em caso de erro
            timestamp: new Date().toISOString(),
            falha_segura: true
        });
    }
}

/**
 * Configura√ß√£o do endpoint
 */
export const config = {
    api: {
        bodyParser: {
            sizeLimit: '1mb',
        },
    },
};
