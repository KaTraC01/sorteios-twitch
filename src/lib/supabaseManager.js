/**
 * SUPABASE CONNECTION MANAGER
 * ===========================
 * 
 * Gerenciador centralizado de conex√µes com Supabase
 * Implementa padr√£o Singleton para otimizar o pool de conex√µes
 * 
 * ANTES: 46 inst√¢ncias de createClient espalhadas pelo projeto
 * DEPOIS: 2 inst√¢ncias controladas (an√¥nima + servi√ßo)
 * 
 * @author Sistema de Otimiza√ß√£o
 * @date $(new Date().toISOString())
 */

import { createClient } from '@supabase/supabase-js';
import logger from '../utils/logger';

// ===================================================================
// CONFIGURA√á√ÉO DE VARI√ÅVEIS DE AMBIENTE
// ===================================================================

// FALLBACK TEMPOR√ÅRIO - usar apenas se vari√°veis n√£o chegarem
const FALLBACK_SUPABASE_URL = 'https://nsqiytflqwlyqhdmueki.supabase.co';
const FALLBACK_SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5zcWl5dGZscXdseXFoZG11ZWtpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzk5MTc5MDQsImV4cCI6MjA1NTQ5MzkwNH0.IyrTn7Hrz-ktNM6iC1Chk8Z-kWK9rhmWljb0n2XLpjo';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || process.env.SUPABASE_URL || FALLBACK_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY || FALLBACK_SUPABASE_ANON_KEY;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;

// Debug: verificar vari√°veis dispon√≠veis (SEGURO - apenas em desenvolvimento)
if (process.env.NODE_ENV === 'development') {
  if (typeof window !== 'undefined') {
    console.log('üîç [DEBUG] Configura√ß√£o Supabase frontend verificada');
    console.log('URL configurada:', !!process.env.NEXT_PUBLIC_SUPABASE_URL);
    console.log('Key configurada:', !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);
  } else {
    console.log('üîç [DEBUG] Configura√ß√£o Supabase backend verificada');
    console.log('URL configurada:', !!process.env.SUPABASE_URL);
    console.log('Key configurada:', !!process.env.SUPABASE_ANON_KEY);
    console.log('Service Key configurada:', !!process.env.SUPABASE_SERVICE_KEY);
  }
}

// Verificar se estamos no browser ou servidor
const isBrowser = typeof window !== 'undefined';

// Valida√ß√£o de configura√ß√£o
if (!supabaseUrl && !isBrowser) {
  const error = 'ERRO CR√çTICO: URL do Supabase n√£o configurada (backend)';
  logger.error(error);
  throw new Error(error);
}

if (!supabaseAnonKey && !isBrowser) {
  const error = 'ERRO CR√çTICO: Chave an√¥nima do Supabase n√£o configurada (backend)';
  logger.error(error);
  throw new Error(error);
}

// ===================================================================
// SINGLETON CLIENTS - OTIMIZA√á√ÉO DE POOL DE CONEX√ïES
// ===================================================================

let anonClient = null;
let serviceClient = null;

/**
 * Cliente Supabase para opera√ß√µes an√¥nimas (frontend)
 * Usado por: componentes React, p√°ginas p√∫blicas
 * Pool: Conex√µes an√¥nimas limitadas
 */
export function getSupabaseClient() {
  // Se n√£o temos URL/Key, retornar um cliente mock no frontend
  if (!supabaseUrl || !supabaseAnonKey) {
    if (isBrowser) {
      console.warn('‚ö†Ô∏è Supabase n√£o configurado no frontend. Usando cliente mock.');
      // Retornar objeto mock que n√£o quebrar√° a aplica√ß√£o
      return {
        from: (table) => ({
          select: (columns) => Promise.resolve({ 
            data: [], 
            error: { message: 'Supabase n√£o configurado no frontend' } 
          }),
          insert: (data) => Promise.resolve({ 
            data: null, 
            error: { message: 'Supabase n√£o configurado no frontend' } 
          }),
          update: (data) => Promise.resolve({ 
            data: null, 
            error: { message: 'Supabase n√£o configurado no frontend' } 
          }),
          delete: () => Promise.resolve({ 
            data: null, 
            error: { message: 'Supabase n√£o configurado no frontend' } 
          }),
          rpc: (name, params) => Promise.resolve({ 
            data: null, 
            error: { message: 'Supabase n√£o configurado no frontend' } 
          })
        }),
        channel: (name) => ({
          on: (event, callback) => ({ unsubscribe: () => {} }),
          subscribe: () => 'SUBSCRIBED',
          unsubscribe: () => 'UNSUBSCRIBED'
        }),
        realtime: {
          channel: (name) => ({
            on: () => ({}),
            subscribe: () => ({}),
            unsubscribe: () => ({})
          })
        },
        auth: {
          getSession: () => Promise.resolve({ data: { session: null }, error: null }),
          signIn: () => Promise.resolve({ error: { message: 'Supabase n√£o configurado no frontend' } }),
          signOut: () => Promise.resolve({ error: { message: 'Supabase n√£o configurado no frontend' } })
        }
      };
    }
    throw new Error('Supabase n√£o configurado no backend');
  }
  
  if (!anonClient) {
    if (!isBrowser) {
      logger.debug('Inicializando cliente Supabase an√¥nimo (singleton)');
    }
    
    anonClient = createClient(supabaseUrl, supabaseAnonKey, {
      auth: {
        autoRefreshToken: isBrowser,
        persistSession: isBrowser,
        detectSessionInUrl: isBrowser
      },
      realtime: {
        params: {
          eventsPerSecond: 10
        }
      }
    });
    
    if (!isBrowser) {
      logger.info('Cliente Supabase an√¥nimo inicializado com sucesso');
    }
  }
  
  return anonClient;
}

/**
 * Cliente Supabase para opera√ß√µes de servi√ßo (backend)
 * Usado por: APIs, cron jobs, opera√ß√µes administrativas
 * Pool: Conex√µes privilegiadas
 */
export function getSupabaseServiceClient() {
  if (!serviceClient) {
    if (!supabaseServiceKey) {
      const error = 'ERRO: Chave de servi√ßo do Supabase n√£o configurada para opera√ß√µes administrativas';
      logger.error(error);
      throw new Error(error);
    }
    
    logger.debug('Inicializando cliente Supabase de servi√ßo (singleton)');
    
    serviceClient = createClient(supabaseUrl, supabaseServiceKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      },
      realtime: {
        params: {
          eventsPerSecond: 50 // Maior throughput para opera√ß√µes administrativas
        }
      }
    });
    
    logger.info('Cliente Supabase de servi√ßo inicializado com sucesso');
  }
  
  return serviceClient;
}

/**
 * Cliente otimizado para fun√ß√µes serverless e cron jobs
 * Configura√ß√£o espec√≠fica para reduzir overhead de conex√£o
 */
export function getSupabaseServerlessClient() {
  // Para serverless, sempre criar uma nova inst√¢ncia otimizada
  // N√£o usar singleton pois o contexto √© ef√™mero
  
  if (!supabaseServiceKey) {
    const error = 'ERRO: Chave de servi√ßo necess√°ria para opera√ß√µes serverless';
    logger.error(error);
    throw new Error(error);
  }
  
  logger.debug('Criando cliente Supabase serverless otimizado');
  
  return createClient(supabaseUrl, supabaseServiceKey, {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    },
    realtime: {
      params: {
        eventsPerSecond: 100 // Alta performance para opera√ß√µes batch
      }
    },
    db: {
      schema: 'public'
    }
  });
}

// ===================================================================
// UTILIT√ÅRIOS E DIAGN√ìSTICOS
// ===================================================================

// Prote√ß√£o contra manipula√ß√£o via console em produ√ß√£o
if (typeof window !== 'undefined' && process.env.NODE_ENV === 'production') {
  // Remover refer√™ncias globais potencialmente perigosas
  Object.defineProperty(window, 'supabase', {
    get: () => undefined,
    set: () => false,
    configurable: false
  });
  
  // Remover fun√ß√µes de debug em produ√ß√£o
  setTimeout(() => {
    delete window.adTrackerDiagnostico;
    delete window.limparLogsAdTracker;
    delete window.verEventosAdTracker;
  }, 1000);
}

/**
 * Testa a conex√£o com o Supabase
 * Fun√ß√£o mantida para compatibilidade com c√≥digo existente
 */
export async function testSupabaseConnection() {
  try {
    const client = getSupabaseClient();
    const { data, error } = await client.from('configuracoes').select('*').limit(1);
    
    if (error) {
      logger.error('TESTE CONEX√ÉO: Erro ao conectar', error);
      return {
        success: false,
        error: error.message
      };
    }
    
    logger.info('TESTE CONEX√ÉO: Conex√£o bem-sucedida');
    return {
      success: true,
      data
    };
  } catch (err) {
    logger.critical('TESTE CONEX√ÉO: Erro cr√≠tico', err);
    return {
      success: false,
      error: err.message
    };
  }
}

/**
 * Fun√ß√£o de diagn√≥stico para verificar status dos clientes
 */
export function getConnectionStatus() {
  return {
    anonClientInitialized: anonClient !== null,
    serviceClientInitialized: serviceClient !== null,
    environment: {
      hasUrl: !!supabaseUrl,
      hasAnonKey: !!supabaseAnonKey,
      hasServiceKey: !!supabaseServiceKey
    }
  };
}

/**
 * Fun√ß√£o para resetar conex√µes (√∫til para testes)
 * ATEN√á√ÉO: Use apenas em desenvolvimento
 */
export function resetConnections() {
  if (process.env.NODE_ENV === 'production') {
    logger.warn('Reset de conex√µes ignorado em produ√ß√£o');
    return;
  }
  
  logger.debug('Resetando conex√µes Supabase');
  anonClient = null;
  serviceClient = null;
}

// ===================================================================
// EXPORTA√á√ïES PARA COMPATIBILIDADE COM C√ìDIGO EXISTENTE
// ===================================================================

// Exporta√ß√£o padr√£o para compatibilidade
export const supabase = getSupabaseClient();

// Fun√ß√£o de sanitiza√ß√£o mantida para compatibilidade
export function sanitizarEntrada(entrada) {
  if (typeof entrada !== 'string') {
    return entrada;
  }
  
  return entrada
    .trim()
    .replace(/[<>]/g, '') // Remove tags HTML b√°sicas
    .substring(0, 255); // Limita tamanho
}

// ===================================================================
// LOG DE INICIALIZA√á√ÉO
// ===================================================================

logger.info('Supabase Manager carregado - Pool de conex√µes otimizado');
logger.debug(`Configura√ß√£o: URL=${!!supabaseUrl}, AnonKey=${!!supabaseAnonKey}, ServiceKey=${!!supabaseServiceKey}`);
