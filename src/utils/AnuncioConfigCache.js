/**
 * Cache Inteligente para Configura√ß√£o de An√∫ncios
 * 
 * ‚úÖ GARANTE: Sistema de m√©tricas permanece 100% intacto
 * ‚úÖ MELHORIA: Reduz requisi√ß√µes ao config.json de m√∫ltiplas para uma √∫nica
 * ‚úÖ SEGURAN√áA: Cache autom√°tico com invalida√ß√£o inteligente
 */

class AnuncioConfigCache {
  static cache = null;
  static lastFetch = 0;
  static isLoading = false;
  static CACHE_DURATION = 5 * 60 * 1000; // 5 minutos - cache curto para atualiza√ß√µes r√°pidas
  static pendingRequests = []; // Fila para requisi√ß√µes simult√¢neas

  /**
   * Busca a configura√ß√£o de an√∫ncios com cache inteligente
   * @returns {Promise<Object>} Configura√ß√£o dos an√∫ncios
   */
  static async getConfig() {
    const now = Date.now();
    
    // Se o cache est√° v√°lido, retorna imediatamente
    if (this.cache && (now - this.lastFetch < this.CACHE_DURATION)) {
      console.log('%c[AnuncioCache] ‚úÖ Cache HIT - Usando dados em cache', 'color: #4CAF50');
      return this.cache;
    }
    
    // Se j√° est√° carregando, adicionar √† fila de espera
    if (this.isLoading) {
      console.log('%c[AnuncioCache] ‚è≥ Aguardando carregamento em andamento...', 'color: #FF9800');
      return new Promise((resolve, reject) => {
        this.pendingRequests.push({ resolve, reject });
      });
    }
    
    // Iniciar carregamento
    this.isLoading = true;
    console.log('%c[AnuncioCache] üì° Cache MISS - Buscando nova configura√ß√£o', 'color: #2196F3');
    
    try {
      const response = await fetch('/anuncios/config.json', {
        // Headers para otimiza√ß√£o sem afetar funcionalidade
        headers: {
          'Cache-Control': 'no-cache', // Sempre buscar vers√£o mais recente
          'Accept': 'application/json'
        }
      });
      
      if (!response.ok) {
        throw new Error(`Erro HTTP: ${response.status}`);
      }
      
      const data = await response.json();
      
      // Validar estrutura dos dados para garantir compatibilidade
      if (!data || typeof data !== 'object') {
        throw new Error('Configura√ß√£o de an√∫ncios inv√°lida');
      }
      
      // Atualizar cache
      this.cache = data;
      this.lastFetch = now;
      
      console.log('%c[AnuncioCache] ‚úÖ Configura√ß√£o carregada e cacheada com sucesso', 'color: #4CAF50');
      
      // Resolver todas as requisi√ß√µes pendentes
      this.pendingRequests.forEach(({ resolve }) => resolve(data));
      this.pendingRequests = [];
      
      return data;
      
    } catch (error) {
      console.error('%c[AnuncioCache] ‚ùå Erro ao carregar configura√ß√£o:', 'color: #F44336', error);
      
      // Rejeitar todas as requisi√ß√µes pendentes
      this.pendingRequests.forEach(({ reject }) => reject(error));
      this.pendingRequests = [];
      
      // Se h√° cache antigo, usar como fallback (melhor que falhar)
      if (this.cache) {
        console.log('%c[AnuncioCache] üîÑ Usando cache antigo como fallback', 'color: #FF9800');
        return this.cache;
      }
      
      throw error;
    } finally {
      this.isLoading = false;
    }
  }
  
  /**
   * For√ßa a invalida√ß√£o do cache
   * √ötil para atualiza√ß√µes administrativas
   */
  static invalidateCache() {
    console.log('%c[AnuncioCache] üîÑ Cache invalidado manualmente', 'color: #9C27B0');
    this.cache = null;
    this.lastFetch = 0;
  }
  
  /**
   * Verifica se o cache est√° v√°lido
   * @returns {boolean}
   */
  static isCacheValid() {
    if (!this.cache) return false;
    const now = Date.now();
    return (now - this.lastFetch < this.CACHE_DURATION);
  }
  
  /**
   * Busca an√∫ncios de um tipo espec√≠fico com cache
   * @param {string} tipo - Tipo do an√∫ncio (lateral, banner, etc.)
   * @returns {Promise<Array>} Lista de an√∫ncios do tipo especificado
   */
  static async getAnunciosByTipo(tipo) {
    try {
      const config = await this.getConfig();
      const anuncios = config[tipo] || [];
      
      // Filtrar apenas an√∫ncios ativos
      const anunciosAtivos = anuncios.filter(anuncio => anuncio.ativo === true);
      
      console.log(`%c[AnuncioCache] üìã Retornando ${anunciosAtivos.length} an√∫ncios ativos do tipo "${tipo}"`, 'color: #673AB7');
      
      return anunciosAtivos;
    } catch (error) {
      console.error(`%c[AnuncioCache] ‚ùå Erro ao buscar an√∫ncios do tipo "${tipo}":`, 'color: #F44336', error);
      return []; // Retorna array vazio em caso de erro
    }
  }
  
  /**
   * Pr√©-carrega a configura√ß√£o em background
   * √ötil para inicializa√ß√£o da aplica√ß√£o
   */
  static async preload() {
    try {
      console.log('%c[AnuncioCache] üöÄ Pr√©-carregando configura√ß√£o de an√∫ncios...', 'color: #3F51B5');
      await this.getConfig();
    } catch (error) {
      console.warn('%c[AnuncioCache] ‚ö†Ô∏è Falha no pr√©-carregamento:', 'color: #FF9800', error);
    }
  }
  
  /**
   * Estat√≠sticas do cache para debugging
   * @returns {Object}
   */
  static getStats() {
    return {
      temCache: !!this.cache,
      ultimoCarregamento: this.lastFetch ? new Date(this.lastFetch).toISOString() : 'Nunca',
      cacheValido: this.isCacheValid(),
      requisicoesPendentes: this.pendingRequests.length,
      carregando: this.isLoading
    };
  }
}

// Pr√©-carregar configura√ß√£o quando o m√≥dulo for importado
if (typeof window !== 'undefined') {
  // Delay pequeno para n√£o bloquear o carregamento inicial
  setTimeout(() => {
    AnuncioConfigCache.preload();
  }, 100);
  
  // Expor no console para debugging em desenvolvimento
  if (process.env.NODE_ENV === 'development') {
    window.AnuncioConfigCache = AnuncioConfigCache;
    console.log('%c[AnuncioCache] üîß Cache dispon√≠vel no console: window.AnuncioConfigCache', 'color: #9C27B0');
  }
}

export default AnuncioConfigCache;
