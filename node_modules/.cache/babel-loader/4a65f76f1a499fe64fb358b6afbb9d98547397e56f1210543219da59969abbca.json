{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import\"./Timer.css\";// Importa o CSS do Timer\nimport{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";function Timer(_ref){let{listaReiniciada}=_ref;// Estado para armazenar o tempo restante\nconst[tempoRestante,setTempoRestante]=useState(calcularTempoRestante());// Função que calcula o tempo restante até o sorteio\nfunction calcularTempoRestante(){const agora=new Date();const sorteioHora=new Date();sorteioHora.setHours(21,0,0,0);// Define a hora do sorteio\nlet diferenca=sorteioHora-agora;if(diferenca<=0){sorteioHora.setDate(sorteioHora.getDate()+1);// Se já passou da hora, define para o dia seguinte\ndiferenca=sorteioHora-agora;}const horas=String(Math.floor(diferenca/(1000*60*60))).padStart(2,\"0\");const minutos=String(Math.floor(diferenca%(1000*60*60)/(1000*60))).padStart(2,\"0\");const segundos=String(Math.floor(diferenca%(1000*60)/1000)).padStart(2,\"0\");return`${horas}:${minutos}:${segundos}`;}// Atualiza o timer a cada segundo\nuseEffect(()=>{const intervalo=setInterval(()=>{setTempoRestante(calcularTempoRestante());},1000);return()=>clearInterval(intervalo);// Limpa o intervalo ao desmontar\n},[]);// **Correção: Agora o timer reseta corretamente quando a lista for reiniciada**\nuseEffect(()=>{if(listaReiniciada){setTempoRestante(calcularTempoRestante());// Recalcula o tempo restante ao resetar a lista\n}},[listaReiniciada]);return/*#__PURE__*/_jsx(\"div\",{className:\"timer\",children:/*#__PURE__*/_jsxs(\"span\",{children:[\"\\u23F3 Sorteio em: \",tempoRestante]})});}export default Timer;","map":{"version":3,"names":["React","useState","useEffect","jsxs","_jsxs","jsx","_jsx","Timer","_ref","listaReiniciada","tempoRestante","setTempoRestante","calcularTempoRestante","agora","Date","sorteioHora","setHours","diferenca","setDate","getDate","horas","String","Math","floor","padStart","minutos","segundos","intervalo","setInterval","clearInterval","className","children"],"sources":["C:/Users/leona/OneDrive/Área de Trabalho/site-sorteio/src/components/Timer/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Timer.css\"; // Importa o CSS do Timer\r\n\r\nfunction Timer({ listaReiniciada }) {\r\n    // Estado para armazenar o tempo restante\r\n    const [tempoRestante, setTempoRestante] = useState(calcularTempoRestante());\r\n\r\n    // Função que calcula o tempo restante até o sorteio\r\n    function calcularTempoRestante() {\r\n        const agora = new Date();\r\n        const sorteioHora = new Date();\r\n        sorteioHora.setHours(21, 0, 0, 0); // Define a hora do sorteio\r\n\r\n        let diferenca = sorteioHora - agora;\r\n        if (diferenca <= 0) {\r\n            sorteioHora.setDate(sorteioHora.getDate() + 1); // Se já passou da hora, define para o dia seguinte\r\n            diferenca = sorteioHora - agora;\r\n        }\r\n\r\n        const horas = String(Math.floor(diferenca / (1000 * 60 * 60))).padStart(2, \"0\");\r\n        const minutos = String(Math.floor((diferenca % (1000 * 60 * 60)) / (1000 * 60))).padStart(2, \"0\");\r\n        const segundos = String(Math.floor((diferenca % (1000 * 60)) / 1000)).padStart(2, \"0\");\r\n\r\n        return `${horas}:${minutos}:${segundos}`;\r\n    }\r\n\r\n    // Atualiza o timer a cada segundo\r\n    useEffect(() => {\r\n        const intervalo = setInterval(() => {\r\n            setTempoRestante(calcularTempoRestante());\r\n        }, 1000);\r\n\r\n        return () => clearInterval(intervalo); // Limpa o intervalo ao desmontar\r\n    }, []);\r\n\r\n    // **Correção: Agora o timer reseta corretamente quando a lista for reiniciada**\r\n    useEffect(() => {\r\n        if (listaReiniciada) {\r\n            setTempoRestante(calcularTempoRestante()); // Recalcula o tempo restante ao resetar a lista\r\n        }\r\n    }, [listaReiniciada]);\r\n\r\n    return (\r\n        <div className=\"timer\">\r\n            <span>⏳ Sorteio em: {tempoRestante}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Timer;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,aAAa,CAAE;AAAA,OAAAC,IAAA,IAAAC,KAAA,CAAAC,GAAA,IAAAC,IAAA,yBAEtB,QAAS,CAAAC,KAAKA,CAAAC,IAAA,CAAsB,IAArB,CAAEC,eAAgB,CAAC,CAAAD,IAAA,CAC9B;AACA,KAAM,CAACE,aAAa,CAAEC,gBAAgB,CAAC,CAAGV,QAAQ,CAACW,qBAAqB,CAAC,CAAC,CAAC,CAE3E;AACA,QAAS,CAAAA,qBAAqBA,CAAA,CAAG,CAC7B,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CACxB,KAAM,CAAAC,WAAW,CAAG,GAAI,CAAAD,IAAI,CAAC,CAAC,CAC9BC,WAAW,CAACC,QAAQ,CAAC,EAAE,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAAE;AAEnC,GAAI,CAAAC,SAAS,CAAGF,WAAW,CAAGF,KAAK,CACnC,GAAII,SAAS,EAAI,CAAC,CAAE,CAChBF,WAAW,CAACG,OAAO,CAACH,WAAW,CAACI,OAAO,CAAC,CAAC,CAAG,CAAC,CAAC,CAAE;AAChDF,SAAS,CAAGF,WAAW,CAAGF,KAAK,CACnC,CAEA,KAAM,CAAAO,KAAK,CAAGC,MAAM,CAACC,IAAI,CAACC,KAAK,CAACN,SAAS,EAAI,IAAI,CAAG,EAAE,CAAG,EAAE,CAAC,CAAC,CAAC,CAACO,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CAC/E,KAAM,CAAAC,OAAO,CAAGJ,MAAM,CAACC,IAAI,CAACC,KAAK,CAAEN,SAAS,EAAI,IAAI,CAAG,EAAE,CAAG,EAAE,CAAC,EAAK,IAAI,CAAG,EAAE,CAAC,CAAC,CAAC,CAACO,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CACjG,KAAM,CAAAE,QAAQ,CAAGL,MAAM,CAACC,IAAI,CAACC,KAAK,CAAEN,SAAS,EAAI,IAAI,CAAG,EAAE,CAAC,CAAI,IAAI,CAAC,CAAC,CAACO,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CAEtF,MAAO,GAAGJ,KAAK,IAAIK,OAAO,IAAIC,QAAQ,EAAE,CAC5C,CAEA;AACAxB,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAyB,SAAS,CAAGC,WAAW,CAAC,IAAM,CAChCjB,gBAAgB,CAACC,qBAAqB,CAAC,CAAC,CAAC,CAC7C,CAAC,CAAE,IAAI,CAAC,CAER,MAAO,IAAMiB,aAAa,CAACF,SAAS,CAAC,CAAE;AAC3C,CAAC,CAAE,EAAE,CAAC,CAEN;AACAzB,SAAS,CAAC,IAAM,CACZ,GAAIO,eAAe,CAAE,CACjBE,gBAAgB,CAACC,qBAAqB,CAAC,CAAC,CAAC,CAAE;AAC/C,CACJ,CAAC,CAAE,CAACH,eAAe,CAAC,CAAC,CAErB,mBACIH,IAAA,QAAKwB,SAAS,CAAC,OAAO,CAAAC,QAAA,cAClB3B,KAAA,SAAA2B,QAAA,EAAM,qBAAc,CAACrB,aAAa,EAAO,CAAC,CACzC,CAAC,CAEd,CAEA,cAAe,CAAAH,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}