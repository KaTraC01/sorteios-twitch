// Vers√£o corrigida que cont√©m apenas as partes modificadas do componente
// Substitua as se√ß√µes correspondentes no arquivo original

// ‚è∞ **Verifica hor√°rios para congelar a lista e sortear**
useEffect(() => {
    const verificarHorario = () => {
        const agora = new Date();
        const horas = agora.getHours();
        const minutos = agora.getMinutes();

        // Congelar a lista √†s 20:50
        if (horas === 20 && minutos >= 50) {
            setListaCongelada(true);
        }

        // Verificar se o sorteio foi realizado √†s 21:00 (n√£o realizar o sorteio diretamente)
        if (horas === 21 && minutos >= 0 && minutos < 5 && !sorteioRealizado) {
            verificarSorteio();
        }

        // Resetar a lista apenas √†s 21:05, mantendo-a vis√≠vel at√© esse momento
        if (horas === 21 && minutos >= 5 && sorteioRealizado) {
            verificarResetLista();
        }
    };

    verificarHorario();
    const intervalo = setInterval(verificarHorario, 1000);
    return () => clearInterval(intervalo);
}, [participantes, sorteioRealizado, ultimaAtualizacao]);

// üîÑ **Fun√ß√£o para verificar se o sorteio foi realizado**
const verificarSorteio = async () => {
    // Em vez de realizar o sorteio, apenas verificar se foi realizado pelo cron job
    const { data: ultimoSorteio, error } = await supabase
        .from("sorteios")
        .select("*")
        .order("data", { ascending: false })
        .limit(1);
    
    if (error) {
        console.error("Erro ao verificar sorteio:", error);
        return;
    }

    if (ultimoSorteio && ultimoSorteio.length > 0) {
        const sorteio = ultimoSorteio[0];
        const dataAtual = new Date();
        const dataSorteio = new Date(sorteio.data);
        
        // Verificar se o sorteio √© de hoje
        if (dataSorteio.toDateString() === dataAtual.toDateString()) {
            console.log("Sorteio do dia encontrado:", sorteio);
            
            // Atualizar interface com dados do sorteio
            setUltimoVencedor({
                nome: sorteio.nome,
                streamer: sorteio.streamer,
                numero: sorteio.numero,
                data: new Date(sorteio.data).toLocaleDateString('pt-BR')
            });
            localStorage.setItem("ultimoVencedor", JSON.stringify({
                nome: sorteio.nome,
                streamer: sorteio.streamer,
                numero: sorteio.numero,
                data: new Date(sorteio.data).toLocaleDateString('pt-BR')
            }));
            setSorteioRealizado(true);
        }
    }
};

// üîÑ **Fun√ß√£o para verificar se a lista foi resetada**
const verificarResetLista = async () => {
    // Verificar se a lista j√° foi resetada pelo cron job
    const { data: participantesAtivos, error: erroParticipantes } = await supabase
        .from("participantes_ativos")
        .select("count");
    
    if (erroParticipantes) {
        console.error("Erro ao verificar reset da lista:", erroParticipantes);
        return;
    }
    
    // Se a lista estiver vazia, atualizar a interface
    if (participantesAtivos && participantesAtivos.length === 0) {
        setParticipantes([]);
        setListaCongelada(false);
        setSorteioRealizado(false);
        fetchParticipantes();
        setUltimaAtualizacao(Date.now());
    }
    
    // Verificar configura√ß√£o
    const { data: config, error: erroConfig } = await supabase
        .from("configuracoes")
        .select("*")
        .eq("chave", "lista_congelada")
        .single();
    
    if (!erroConfig && config && config.valor === "false") {
        setListaCongelada(false);
    }
};

// Substitua a antiga fun√ß√£o realizarSorteio() por esta vers√£o que apenas verifica
// Apague todo o conte√∫do da antiga fun√ß√£o realizarSorteio que tenta criar sorteios 